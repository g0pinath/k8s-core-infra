name: Send-Dev-Kube-Hunter-Results-2Slack
env:
  DEV_ARM_SUBSCRIPTION_ID: "6f481927-b09b-4d4c-8329-27751073cfd2" #${{ secrets.DEV_ARM_SUBSCRIPTION_ID }} 
  DEV_K8S_RG_NAME:  "RG-DEV-K8S-CLUSTER" 
  DEV_K8S_KV_NAME: "KV-MET-DEV-K8S01" 
  DEV_K8S_NAME: "metaks-np-ae"
  REPORTS_STORAGE_KEY: ${{ secrets.DEV_REPORTS_STORAGE_KEY }}
  STORAGE_ACCOUNT_NAME: "azaksmetdevtf01"
  #HTML reports are uploaded to this storage account 
  SLACK_CHANNEL_TOKEN: ${{ secrets.SLACK_CHANNEL_TOKEN }}

on:
  workflow_dispatch:  
  push:
    branches: [ develop ]   
  schedule:
    - cron: "0 13 * * *"  

jobs:
  DefectDojo-Report:
    runs-on: windows-latest  # For a list of available runner types, refer to  # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    #needs: MRS-Dev-PreValidation
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login via Az module
        uses: azure/login@v1
        with:
          creds: ${{secrets.DEV_MSDN_AZURE_CREDENTIALS}}
          enable-AzPSSession: true 
#Export the kube-hunter pod logs to json.                          
      - name: Kubectl logs <kube-hunter-pod> && Dump it to JSON
        run: |
              az account set -s $env:DEV_ARM_SUBSCRIPTION_ID 
              az aks Get-Credentials -g $env:DEV_K8S_RG_NAME  -n $env:DEV_K8S_NAME --overwrite-existing --admin
              #find the pod name
              $podsjson = kubectl get pods -n devops-addons -o json | convertfrom-json
              $kube_hunter_pod_name = ($podsjson.items | where {$_.metadata.name -like "*kube-hunter*"}).metadata.name
              $logs = kubectl logs $kube_hunter_pod_name  -n devops-addons  
              $date = Get-Date -Format yyyy-MM 
              #after midnight date might change so just look for year and month pattern
              foreach($line in $lines){if($line -notlike "*$date*"){$json+=$line}}
              $Vulnerabilities = ($json | ConvertFrom-Json | select vulnerabilities).Vulnerabilities
              .\.github\workflows\scripts\GenHTMLReport.ps1 -K8S_NAME $env:DEV_K8S_NAME -vulnerabilities $Vulnerabilities
              
      - name: Publish JSON reports to Slack
        run: |
                #send to slack -- Slack needs the file stored somewhere and in this case we are using Azure Blob storage.
                Set-PSRepository -Name PSGallery -InstallationPolicy Trusted          
                Import-Module Az.Storage
                $Key = $ENV:REPORTS_STORAGE_KEY
                $SAContext = New-AzStorageContext -StorageAccountName "$env:STORAGE_ACCOUNT_NAME" -StorageAccountKey "$Key"
                $containerName = "reports"
                $blobName = "$env:DEV_K8S_NAME/kube_hunter_reports.html"
                $destinationFileName = "kube_hunter_reports.html"
                Set-AzureStorageBlobContent -Container "$containerName" -File "$destinationFileName" `
                -Blob "$blobName" -Force  -Context $SAContext
                Start-Sleep -S 60
                $StartTime = Get-Date 
                $EndTime = (Get-Date).AddHours(24)
                $sasToken = New-AzStorageBlobSASToken -Container build-artifacts -Blob $blobName  -Context $SAContext -Permission rl -StartTime $StartTime -ExpiryTime $EndTime
                $URL = "https://"+ "$env:STORAGE_ACCOUNT_NAME" + ".blob.core.windows.net/" + $containerName + "/" + $blobName + $sasToken
                
                Install-Module PSSlack
                Import-Module PSSlack
                $SLACK_CHANNEL_TOKEN = $env:SLACK_CHANNEL_TOKEN
                $att = New-SlackMessageAttachment -Color $_PSSlackColorMap.green `
                                    -Title 'Click here to download post deployment validation reports' `
                                    -TitleLink $url `
                                    -Pretext 'Post Deployment Steps - validate website status' `
                                    -Fallback 'IIS and Website validation reports' 
                Send-SlackMessage -Uri $SLACK_CHANNEL_TOKEN -Attachments $att 
                
      #scan type is case sensitive. Available values are below -- reference only.
      #Available values : , Netsparker Scan, Burp Scan, Nessus Scan, Nmap Scan, Nexpose Scan, AppSpider Scan, Veracode Scan, Checkmarx Scan, Checkmarx Scan detailed, Crashtest Security JSON File, Crashtest Security XML File, ZAP Scan, Arachni Scan, VCG Scan, Dependency Check Scan, Dependency Track Finding Packaging Format (FPF) Export, Retire.js Scan, Node Security Platform Scan, NPM Audit Scan, Qualys Scan, Qualys Infrastructure Scan (WebGUI XML), Qualys Webapp Scan, OpenVAS CSV, Snyk Scan, Generic Findings Import, Trustwave Scan (CSV), SKF Scan, Clair Klar Scan, Bandit Scan, ESLint Scan, SSL Labs Scan, Acunetix Scan, Fortify Scan, Gosec Scanner, SonarQube Scan, SonarQube Scan detailed, SonarQube API Import, MobSF Scan, Trufflehog Scan, Nikto Scan, Clair Scan, Brakeman Scan, SpotBugs Scan, AWS Scout2 Scan, AWS Prowler Scan, IBM AppScan DAST, PHP Security Audit v2, PHP Symfony Security Check, Safety Scan, DawnScanner Scan, Anchore Engine Scan, Bundler-Audit Scan, Twistlock Image Scan, Kiuwan Scan, Blackduck Hub Scan, Blackduck Component Risk, Openscap Vulnerability Scan, Wapiti Scan, Immuniweb Scan, Sonatype Application Scan, Cobalt.io Scan, Mozilla Observatory Scan, Whitesource Scan, Contrast Scan, Microfocus Webinspect Scan, Wpscan, Sslscan, JFrog Xray Scan, Sslyze Scan, SSLyze 3 Scan (JSON), Testssl Scan, Hadolint Dockerfile check, Aqua Scan, HackerOne Cases, Xanitizer Scan, Outpost24 Scan, Burp Enterprise Scan, DSOP Scan, Trivy Scan, Anchore Enterprise Policy Check, Gitleaks Scan, Choctaw Hog Scan, Harbor Vulnerability Scan, Github Vulnerability Scan, Yarn Audit Scan, BugCrowd Scan, GitLab SAST Report, AWS Security Hub Scan, GitLab Dependency Scanning Report, HuskyCI Report, Semgrep JSON Report, Risk Recon API Importer, DrHeader JSON Importer, Checkov Scan, kube-hunter Scan, CCVS Report, ORT evaluated model Importer, SARIF
      #the json file has to be in a specific format for DD to consume, refer the working sample in devsecops\scripts folder.